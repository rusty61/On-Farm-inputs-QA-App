# apps/backend/routes/records.py
from fastapi import APIRouter, HTTPException, Request
from fastapi.templating import Jinja2Templates
from datetime import datetime, timezone
from pathlib import Path

from apps.backend.db_supabase import (
    get_app_by_id, get_owner_by_id, get_paddock_by_id
)

router = APIRouter()

# Point to: apps/backend/app/templates/application/
# (Adjust the pieces below if your folder name is different)
TEMPLATES_DIR = Path(__file__).resolve().parents[1] / "app" / "templates" / "application"
templates = Jinja2Templates(directory=str(TEMPLATES_DIR))  # <-- this is the correct way

def kph_to_ms(v):
    return None if v is None else float(v) * (1000.0/3600.0)

def paddock_to_template(p):
    if not p:
        return None
    return {
        "name": p.get("paddock_name"),
        "gps_latitude": p.get("centroid_lat"),
        "gps_longitude": p.get("centroid_lng"),
        "gps_accuracy_m": "-",               # not stored in your schema
        "gps_captured_at": p.get("created_at"),
    }

@router.get("/applications/{application_id}/preview")
async def preview_application(request: Request, application_id: str):
    app_row = await get_app_by_id(application_id)
    if not app_row:
        raise HTTPException(404, "Application not found")

    owner   = await get_owner_by_id(app_row["owner_id"]) if app_row.get("owner_id") else None
    paddock = await get_paddock_by_id(app_row["paddock_id"]) if app_row.get("paddock_id") else None

    weather = {
        "wind_speed_ms":      kph_to_ms(app_row.get("weather_wind_kph")),
        "wind_direction_deg": app_row.get("weather_wind_dir"),
        "temp_c":             app_row.get("weather_temp_c"),
        "humidity_pct":       app_row.get("weather_rh_pct"),
    }

    context = {
        "request": request,
        "owner": {"name": owner["owner_name"] if owner else "Owner"},
        "application": {
            "id": app_row["application_id"],
            "started_at": app_row.get("started_at"),
            "finalized": app_row.get("finalized"),
            "notes": app_row.get("notes"),
        },
        "paddocks": [paddock_to_template(paddock)] if paddock else [],
        "weather": weather,
        "qr_code": None,
        "record_url": app_row.get("pdf_url"),
        "generated_at": datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
    }
    # Make sure the file inside that folder is actually named "templates.html"
    return templates.TemplateResponse("templates.html", context)
